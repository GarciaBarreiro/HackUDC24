<!--
SPDX-FileCopyrightText: 2024 Tomás García Barreiro, Ángel Suárez Torres, Muhammad Imran

SPDX-License-Identifier: MIT-0
-->
---
import Layout from '~/layouts/PageLayout.astro';

import CallToAction from '~/components/widgets/CallToAction.astro';

import Headline from '~/components/blog/Headline.astro';

import Button from '~/components/ui/Button.astro';

const metadata = {
  title: 'Dashboard',
}
---

<Layout metadata={metadata}>
  
  <Headline
    title="Dashboard"
  />

  <div class="grid grid-cols-4 py-3 px-3 md:px-6 mx-40 w-auto">
    <div class="flex">
      <form>
        <input class="cursor-pointer m-1 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900" type="date" id="start_date" name="start_date" min="1970-01-01">
        <input class="cursor-pointer m-1 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900" type="date" id="end_date" name="end_date" min="1970-01-01">
      </form>
    </div>

    <!-- empty divs, TODO: clean later -->
    <div></div>
    <div></div>

    <div class="flex justify-end">
      <form id="file-form">
        <input id="fileInput" type="file" style="display:none;" accept=".csv" name="file"/>
        <Button variant="primary" text="Upload CSV" icon="tabler:upload" onclick="document.getElementById('fileInput').click();"/>
      </form>
    </div>

    <div class="grid grid-cols-subgrid gap-4 col-span-4 m-1">
      <canvas id="chart">
      </canvas>
    </div>

    <!-- empty divs, TODO: clean later -->
    <div></div>
    <div></div>
    <div></div>
    <!-- TODO: connect this with form above-->
    <div class="flex justify-end">
      <Button type="submit" variant="primary" text="Analyze" icon="tabler:report-analytics"/>
    </div>
  </div>

  <!-- CallToAction Widget *********** -->

  <CallToAction
    actions={[
      {
        variant: 'primary',
        text: 'Get template',
        href: 'src/assets/examples/example.csv',
        target: '_blank',
        icon: 'tabler:download',
      },
    ]}
  >
    <Fragment slot="title">
      Download an example CSV so you know how to structure yours
    </Fragment>

    <Fragment slot="subtitle">
      This is a subtitle.
    </Fragment>
  </CallToAction>

</Layout>

<script>
  // import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
  import Chart from "chart.js/auto";

  /*
  async function getCSV() {
    const response = await fetch("localhost:5000/api/data.json");
    return response.json();
  }
  */

  const file_form = document.querySelector("#file-form");

  async function sendFileData() {
    const formData = new FormData(file_form);
    console.log(formData);
    /*
    var object = {};
    formData.forEach((value,key) => object[key] = value);
    var json = JSON.stringify(object);
    */

    try {
      const response = await fetch("http://localhost:5000/upload", {
        method: "POST",
        headers: new Headers({'enctype': 'multipart/form-data'}),
        body: formData,
        credentials: 'include',
      });
      var rpjson = await response.json();
      if (rpjson.message === 'Login successful') {
        // create chart
      }
    } catch (e) {
      console.error(e);
    }
  }

  document.getElementById('fileInput').addEventListener('change', function (e) {
    if (e.target.files[0]) {
      sendFileData();
      document.getElementById('fileInput').value = null;
    }
  });
  /*
  file_form.addEventListener("submit", (event) => {
    event.preventDefault();
    sendFileData();
  });
  */

  function setTodayDate() {
    var today = new Date().toISOString().slice(0,10);
    document.getElementById('start_date').setAttribute('max', today);
    document.getElementById('end_date').setAttribute('max', today);
  }

  function createChart(obj) {
    const options = {
      plugins: {
        colors: {
          forceOverride: true
        }
      }
    };

    console.log(obj);
    var date = [];
    var kwh = [];
    for (const o of obj.data) {
      kwh.push(o.kwh);
      date.push(o.day + '/' + o.month + '/' + o.day + ' ' + o.hour);
    }
    new Chart(document.getElementById('chart'), {
      type: 'line',
      data: {
        labels: date,
        datasets: [
          {
            label: obj.data[0].username +"'s kwh",
            data: kwh,
          }
        ]
      }
    });

    Chart.defaults.backgroundColor = '#))0005';
    Chart.defaults.borderColor = '#FFFFFF';
    Chart.defaults.color = '#12F';
  }

  var json = '{"data":[' +
             '{"year":2022,"month":12,"day":12,"hour":1,"kwh":0.032,"username":"frd"},' +
             '{"year":2022,"month":12,"day":12,"hour":2,"kwh":0.302,"username":"frd"},' +
             '{"year":2022,"month":12,"day":12,"hour":3,"kwh":3.032,"username":"frd"},' +
             '{"year":2022,"month":12,"day":12,"hour":4,"kwh":3.332,"username":"frd"}' +
             ']}';

  createChart(JSON.parse(json));
  setTodayDate();
  /*
  getCSV().then((data) => {
    console.log(data);
  });
  */

</script>
